@page "/counter"
@using System.Net.WebSockets;
@using System.Text;
@using System.Text.Json.Nodes;
@using Secp256k1Net;

<h1>Counter</h1>

@if (nostrEventLists == null || nostrEventLists.Count <= 0)
{
    <p><em>Loading...</em></p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>Pubkey</th>
            <th>Contnent</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var nostrEvent in nostrEventLists)
        {
            <tr>
                <td width="50">@nostrEvent.name</td>
                <td width="200">@nostrEvent.content</td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    private List<NostrEvent> nostrEventLists = new();

    protected override async Task OnInitializedAsync()
    {
        Uri uri = new("wss://yabu.me/");

        using ClientWebSocket ws = new();
        await ws.ConnectAsync(uri, default);

        var req = "[\"REQ\",\"_\",{\"kinds\": [1],\"limit\": 10}]";

        Console.WriteLine("< " + req);
        await ws.SendAsync(Encoding.UTF8.GetBytes(req), WebSocketMessageType.Text, true, default);

        var buffer = new byte[1024];

        try
        {
            while (true)
            {
                ArraySegment<byte> segment = new(buffer);
                var result = await ws.ReceiveAsync(segment, default);

                if (result.MessageType == WebSocketMessageType.Close)
                {
                    await ws.CloseAsync(WebSocketCloseStatus.NormalClosure, "OK", default);
                    return;
                }

                var count = result.Count;
                while (!result.EndOfMessage)
                {
                    if (count >= buffer.Length)
                    {
                        await ws.CloseAsync(WebSocketCloseStatus.NormalClosure, "That's too long", default);
                        return;
                    }

                    segment = new ArraySegment<byte>(buffer, count, buffer.Length - count);
                    result = await ws.ReceiveAsync(segment, default);
                    count += result.Count;
                }

                var message = Encoding.UTF8.GetString(buffer, 0, count);
                // Console.WriteLine("> " + message);
                var node = JsonNode.Parse(message);
                var nodes = node.AsArray();
                if (nodes.Count < 3 || node[0].ToString() != "EVENT")
                {
                    return;
                }

                var ev = nodes[2];
                var content = ev["content"].ToString();
                var name = ev["pubkey"].ToString();

                nostrEventLists.Add(new NostrEvent(name, content));

                //TODO: 一旦、EOSEが含まれるメッセージが来たら終了する
                if (message.Contains("EOSE")) return;
            }
        }
        catch(Exception ex)
        {
            return; 
        }
    }

    private class NostrEvent(string _name, string _content)
    {
        public string name = _name;
        public string content = _content;
    }
}
