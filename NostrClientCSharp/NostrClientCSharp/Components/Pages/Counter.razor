@page "/counter"
@using System.Net.WebSockets;
@using System.Text;
@using System.Text.Json.Nodes;
@using Secp256k1Net;

<h1>Counter</h1>

@if (nostrEventLists == null || nostrEventLists.Count <= 0)
{
    <p><em>Loading...</em></p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>Pubkey</th>
            <th>Contnent</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var nostrEvent in nostrEventLists)
        {
            <tr>
                <td width="50">@nostrEvent.name</td>
                <td width="200">@nostrEvent.content</td>
            </tr>
        }
    </tbody>
</table>

<button onclick="@OnClick">test</button>
}

@code {
    private List<NostrEvent> nostrEventLists = new();
    private ClientWebSocket ws = new();

    protected async Task OnClick()
    {
        Console.WriteLine("onclick");

        Uri uri = new("wss://yabu.me/");

        byte[] privateKey = new byte[32];
        new Random().NextBytes(privateKey);
        byte[] publicKey = new byte[64];

        using (var secp256k1 = new Secp256k1())
        {
            secp256k1.SecretKeyVerify(privateKey);
            secp256k1.PublicKeyCreate(publicKey, privateKey);
        }

        string message = "Hello, Nostr! blazor app test - csharp mob programming";
        string postContent = CreateNostrPost(publicKey, privateKey, message);

        //using ClientWebSocket ws = new();
        //await ws.ConnectAsync(uri, default);

        var eventJson = "[\"EVENT\"," + postContent + "]";
        await ws.SendAsync(Encoding.UTF8.GetBytes(eventJson), WebSocketMessageType.Text, true, default);

        var buffer = new byte[1024];
        ArraySegment<byte> segment = new(buffer);
        var result = await ws.ReceiveAsync(segment, default);

        if (result.MessageType == WebSocketMessageType.Close)
        {
            await ws.CloseAsync(WebSocketCloseStatus.NormalClosure, "OK", default);
            return;
        }
    }

    static string CreateNostrPost(byte[] publicKey, byte[] privateKey, string message)
    {
        string pubKeyHex = BitConverter.ToString(publicKey).Replace("-", "").ToLower();
        string timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString();
        string id = Guid.NewGuid().ToString();

        //string postTemplate = "{\"id\":\"{0}\",\"pubkey\":\"{1}\",\"created_at\":{2},\"kind\":1,\"tags\":[],\"content\":\"{3}\",\"sig\":\"{4}\"}";
        string unsignedPost = $"{{\"id\":\"{id}\",\"pubkey\":\"{pubKeyHex}\",\"created_at\":{timestamp},\"kind\":1,\"tags\":[],\"content\":\"{message}\",\"sig\":\"\"}}";

        //string unsignedPost = string.Format(postTemplate, id, pubKeyHex, timestamp, message, "");
        byte[] unsignedPostBytes = Encoding.UTF8.GetBytes(unsignedPost);
        var buffer = new byte[1024];

        byte[] signature = new byte[64];
        using (var secp256k1 = new Secp256k1())
        {
            secp256k1.Sign(signature, unsignedPostBytes, privateKey);
        }

        string signatureHex = BitConverter.ToString(signature).Replace("-", "").ToLower();
        //string signedPost = string.Format(postTemplate, id, pubKeyHex, timestamp, message, signatureHex);
        string signedPost = $"{{\"id\":\"{id}\",\"pubkey\":\"{pubKeyHex}\",\"created_at\":{timestamp},\"kind\":1,\"tags\":[],\"content\":\"{message}\",\"sig\":\"{signatureHex}\"}}";
        return signedPost;
    }

    protected override async Task OnInitializedAsync()
    {
        Uri uri = new("wss://yabu.me/");

        //using ClientWebSocket ws = new();
        await ws.ConnectAsync(uri, default);

        var req = "[\"REQ\",\"_\",{\"kinds\":[1],\"limit\":10}]";

        Console.WriteLine("< " + req);
        await ws.SendAsync(Encoding.UTF8.GetBytes(req), WebSocketMessageType.Text, true, default);

        var buffer = new byte[1024];

        try
        {
            while (true)
            {
                ArraySegment<byte> segment = new(buffer);
                var result = await ws.ReceiveAsync(segment, default);

                if (result.MessageType == WebSocketMessageType.Close)
                {
                    await ws.CloseAsync(WebSocketCloseStatus.NormalClosure, "OK", default);
                    return;
                }

                var count = result.Count;
                while (!result.EndOfMessage)
                {
                    if (count >= buffer.Length)
                    {
                        await ws.CloseAsync(WebSocketCloseStatus.NormalClosure, "That's too long", default);
                        return;
                    }

                    segment = new ArraySegment<byte>(buffer, count, buffer.Length - count);
                    result = await ws.ReceiveAsync(segment, default);
                    count += result.Count;
                }

                var message = Encoding.UTF8.GetString(buffer, 0, count);
                // Console.WriteLine("> " + message);
                var node = JsonNode.Parse(message);
                var nodes = node.AsArray();
                if (nodes.Count < 3 || node[0].ToString() != "EVENT")
                {
                    return;
                }

                var ev = nodes[2];
                var content = ev["content"].ToString();
                var name = ev["pubkey"].ToString();

                nostrEventLists.Add(new NostrEvent(name, content));

                //TODO: 一旦、EOSEが含まれるメッセージが来たら終了する
                if (message.Contains("EOSE")) return;
            }
        }
        catch(Exception ex)
        {
            return; 
        }
    }

    private class NostrEvent(string _name, string _content)
    {
        public string name = _name;
        public string content = _content;
    }
}
